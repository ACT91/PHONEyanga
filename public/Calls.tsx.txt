import React, { useState, useEffect } from 'react';
import {
    PhoneIcon,
    PhoneArrowDownLeftIcon,
    PhoneArrowUpRightIcon,
    PhoneXMarkIcon,
    MagnifyingGlassIcon,
    UserCircleIcon,
    ClockIcon
} from '@heroicons/react/24/outline';
import { toast } from 'react-toastify';
import io, { Socket } from 'socket.io-client';

interface Call {
    id: number;
    caller: string;
    number: string;
    type: 'incoming' | 'outgoing' | 'missed';
    duration: string;
    time: string;
    date: string;
    avatar?: string;
}

const Calls: React.FC = () => {
    const [calls, setCalls] = useState<Call[]>([]);
    const [filteredCalls, setFilteredCalls] = useState<Call[]>([]);
    const [searchTerm, setSearchTerm] = useState('');
    const [filterType, setFilterType] = useState<'all' | 'incoming' | 'outgoing' | 'missed'>('all');
    const [socket, setSocket] = useState<Socket | null>(null);

    useEffect(() => {
        const newSocket = io('http://localhost:8000');
        setSocket(newSocket);

        // Listen for new calls
        newSocket.on('newCall', (call: Call) => {
            setCalls(prev => [call, ...prev]);
            if (call.type === 'missed') {
                toast.error(`Missed call from ${call.caller}`);
            }
        });

        // Fetch initial data
        fetchCalls();

        return () => {
            newSocket.disconnect();
        };
    }, []);

    useEffect(() => {
        let filtered = calls;

        // Filter by search term
        if (searchTerm) {
            filtered = filtered.filter(call =>
                call.caller.toLowerCase().includes(searchTerm.toLowerCase()) ||
                call.number.includes(searchTerm)
            );
        }

        // Filter by type
        if (filterType !== 'all') {
            filtered = filtered.filter(call => call.type === filterType);
        }

        setFilteredCalls(filtered);
    }, [calls, searchTerm, filterType]);

    const fetchCalls = async () => {
        try {
            const response = await fetch('http://localhost:8000/calls');
            const data = await response.json();
            setCalls(data);
        } catch (error) {
            console.error('Error fetching calls:', error);
        }
    };

    const makeCall = async (number: string) => {
        try {
            await fetch('http://localhost:8000/make-call', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ number })
            });
            toast.success(`Calling ${number}...`);
        } catch (error) {
            toast.error('Failed to make call');
        }
    };

    const getCallIcon = (type: string) => {
        switch (type) {
            case 'incoming':
                return <PhoneArrowDownLeftIcon className="h-6 w-6 text-green-500" />;
            case 'outgoing':
                return <PhoneArrowUpRightIcon className="h-6 w-6 text-blue-500" />;
            case 'missed':
                return <PhoneXMarkIcon className="h-6 w-6 text-red-500" />;
            default:
                return <PhoneIcon className="h-6 w-6 text-gray-500" />;
        }
    };

    return (
        <div>
            {/* Render UI for calls */}
        </div>
    );
};

export default Calls;