import React, { useState, useEffect } from 'react';
import { 
  MagnifyingGlassIcon, 
  PaperAirplaneIcon,
  UserCircleIcon,
  PhoneIcon
} from '@heroicons/react/24/outline';
import { toast } from 'react-toastify';
import io, { Socket } from 'socket.io-client';

interface Message {
  id: number;
  sender: string;
  content: string;
  time: string;
  isRead: boolean;
  isOutgoing: boolean;
  avatar?: string;
}

interface Conversation {
  contact: string;
  lastMessage: string;
  time: string;
  unreadCount: number;
  avatar?: string;
}

const Messages: React.FC = () => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [conversations, setConversations] = useState<Conversation[]>([]);
  const [selectedContact, setSelectedContact] = useState<string>('');
  const [newMessage, setNewMessage] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  const [socket, setSocket] = useState<Socket | null>(null);

  useEffect(() => {
    const newSocket = io('http://localhost:8000');
    setSocket(newSocket);

    // Listen for new messages
    newSocket.on('newMessage', (message: Message) => {
      setMessages(prev => [...prev, message]);
      toast.info(`New message from ${message.sender}`);
    });

    // Fetch initial data
    fetchMessages();
    fetchConversations();

    return () => {
      newSocket.disconnect();
    };
  }, []);

  const fetchMessages = async () => {
    try {
      const response = await fetch('http://localhost:8000/messages');
      const data = await response.json();
      setMessages(data);
    } catch (error) {
      console.error('Error fetching messages:', error);
    }
  };

  const fetchConversations = async () => {
    try {
      const response = await fetch('http://localhost:8000/conversations');
      const data = await response.json();
      setConversations(data);
    } catch (error) {
      console.error('Error fetching conversations:', error);
    }
  };

  const sendMessage = async () => {
    if (!newMessage.trim() || !selectedContact) return;

    const message = {
      sender: 'You',
      content: newMessage,
      recipient: selectedContact,
      time: new Date().toLocaleTimeString(),
      isOutgoing: true
    };

    try {
      await fetch('http://localhost:8000/send-message', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(message)
      });
      
      setNewMessage('');
      toast.success('Message sent!');
    } catch (error) {
      toast.error('Failed to send message');
    }
  };

  const filteredConversations = conversations.filter(conv =>
    conv.contact.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const selectedMessages = messages.filter(msg => 
    msg.sender === selectedContact || 
    (msg.isOutgoing && selectedContact === 'You')
  );

  return (
    <div className="h-[calc(100vh-8rem)]">
      <div className="flex items-center justify-between mb-6">
        <h1 className="text-3xl font-bold">Messages</h1>
        <div className="badge badge-primary">{messages.filter(m => !m.isRead).length} unread</div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 h-full">
        {/* Conversations List */}
        <div className="card bg-base-100 shadow-xl">
          <div className="card-body p-0">
            <div className="p-4 border-b">
              <div className="relative">
                <MagnifyingGlassIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-base-content/50" />
                <input
                  type="text"
                  placeholder="Search conversations..."
                  className="input input-bordered w-full pl-10"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                />
              </div>
            </div>
            
            <div className="overflow-y-auto flex-1">
              {filteredConversations.map((conv, index) => (
                <div
                  key={index}
                  className={`flex items-center p-4 hover:bg-base-200 cursor-pointer border-b ${
                    selectedContact === conv.contact ? 'bg-primary/10' : ''
                  }`}
                  onClick={() => setSelectedContact(conv.contact)}
                >
                  <div className="avatar placeholder mr-3">
                    <div className="bg-neutral-focus text-neutral-content rounded-full w-12">
                      {conv.avatar ? (
                        <img src={conv.avatar} alt={conv.contact} />
                      ) : (
                        <UserCircleIcon className="w-8 h-8" />
                      )}
                    </div>
                  </div>
                  <div className="flex-1 min-w-0">
                    <div className="flex items-center justify-between">
                      <h3 className="font-semibold truncate">{conv.contact}</h3>
                      <span className="text-xs text-base-content/70">{conv.time}</span>
                    </div>
                    <p className="text-sm text-base-content/70 truncate">{conv.lastMessage}</p>
                  </div>
                  {conv.unreadCount > 0 && (
                    <div className="badge badge-primary badge-sm ml-2">
                      {conv.unreadCount}
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
        </div>

        {/* Chat Area */}
        <div className="lg:col-span-2 card bg-base-100 shadow-xl">
          {selectedContact ? (
            <div className="card-body p-0 flex flex-col h-full">
              {/* Chat Header */}
              <div className="p-4 border-b bg-base-200">
                <div className="flex items-center justify-between">
                  <div className="flex items-center">
                    <div className="avatar placeholder mr-3">
                      <div className="bg-neutral-focus text-neutral-content rounded-full w-10">
                        <UserCircleIcon className="w-6 h-6" />
                      </div>
                    </div>
                    <div>
                      <h3 className="font-semibold">{selectedContact}</h3>
                      <p className="text-sm text-base-content/70">Online</p>
                    </div>
                  </div>
                  <button className="btn btn-ghost btn-sm">
                    <PhoneIcon className="w-5 h-5" />
                  </button>
                </div>
              </div>

              {/* Messages */}
              <div className="flex-1 overflow-y-auto p-4 space-y-4">
                {selectedMessages.map((message) => (
                  <div
                    key={message.id}
                    className={`chat ${message.isOutgoing ? 'chat-end' : 'chat-start'}`}
                  >
                    <div className="chat-image avatar">
                      <div className="w-10 rounded-full">
                        <UserCircleIcon className="w-10 h-10" />
                      </div>
                    </div>
                    <div className="chat-header">
                      {message.sender}
                      <time className="text-xs opacity-50 ml-1">{message.time}</time>
                    </div>
                    <div className={`chat-bubble ${message.isOutgoing ? 'chat-bubble-primary' : ''}`}>
                      {message.content}
                    </div>
                  </div>
                ))}
              </div>

              {/* Message Input */}
              <div className="p-4 border-t">
                <div className="flex space-x-2">
                  <input
                    type="text"
                    placeholder="Type a message..."
                    className="input input-bordered flex-1"
                    value={newMessage}
                    onChange={(e) => setNewMessage(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
                  />
                  <button 
                    className="btn btn-primary"
                    onClick={sendMessage}
                    disabled={!newMessage.trim()}
                  >
                    <PaperAirplaneIcon className="w-5 h-5" />
                  </button>
                </div>
              </div>
            </div>
          ) : (
            <div className="card-body flex items-center justify-center">
              <div className="text-center">
                <ChatBubbleLeftRightIcon className="w-16 h-16 mx-auto text-base-content/30 mb-4" />
                <h3 className="text-lg font-semibold mb-2">Select a conversation</h3>
                <p className="text-base-content/70">Choose a contact to start messaging</p>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Messages;